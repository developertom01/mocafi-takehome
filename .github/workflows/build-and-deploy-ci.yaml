name: build-and-deploy-ci

on:
  push:
    branches:
      - main

jobs:
  test-server:
    env:
      CI: true
      DATABASE_NAME: mocafi-db
      PORT: 3000
      APP_URL: http://localhost:3000
      APP_SECRET: 45ddbeb7ce0b195d592c9e37f46854498f637e7b8747540f192893fd9230d905
      DATABASE_SECRET: 45ddbeb7ce0b195d592c9e37f46854498f637e7b8747540f192893fd9230d905
      MONGO_DB_KEY_VAULT_NAMESPACE: encryption.__KeyVault
      MASTER_KEY: v+h2j0AqFh/CsRul6Lj89aCy7TQNKUodnbovkfSzsxDhNDZm3f947OChEIAiok7baqhcyxZoszm4nTc/R4BkYVZIYCMTmHW1J3ytes9ej1gHx4KpQWFPNeLYC1xkG6nO

    runs-on: ubuntu-latest
    name: Test server
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup docker compose
        uses: KengoTODA/actions-setup-docker-compose@v1
        with:
          version: "2.14.2"

      - name: Start services
        env:
          DB_CONNECTION_STRING: mongodb://root:example@db/mocafi-db?authSource=admin
        run: docker-compose -f server/docker-compose.ci.yaml up -d

      - name: Setup node 20
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: |
          cd server
          npm install

      - name: Run tests
        env:
          DB_CONNECTION_STRING: mongodb://root:example@localhost/mocafi-db?authSource=admin
        run: |
          cd server
          npm run test

  test-client:
    runs-on: ubuntu-latest
    name: Test client
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Use node 20
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: |
          cd client
          npm install

      - name: Run tests
        run: |
          cd client
          npm run test

  build-and-push-server-container:
    runs-on: ubuntu-latest
    name: Build and push server container
    needs: test-server
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Login to Docker Container Registry
        uses: docker/login-action@v3
        with:
          username: sarptom
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push server container
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: sarptom/mocafi-app-server:latest
          context: server
          file: server/Dockerfile

  build-and-push-client-container:
    runs-on: ubuntu-latest
    name: Build and push client container
    needs: test-client
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          username: sarptom
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push client container
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: sarptom/mocafi-app-client:latest
          context: client
          file: client/Dockerfile
        env:
          REACT_APP_API_URL: http://localhost:3000

  deploy:
    runs-on: ubuntu-latest
    name: Deploy
    needs: [build-and-push-server-container, build-and-push-client-container]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.1.7"

      - name: Terraform Init
        run: terraform -chdir=infra/iac init

      - name: Terraform Apply
        run: terraform -chdir=infra/iac apply -auto-approve
        env:
          TF_VAR_root_password: ${{ secrets.ROOT_PASSWORD }}
          TF_VAR_app_secret: ${{ secrets.APP_SECRET }}
          TF_VAR_database_secret: ${{ secrets.DATABASE_SECRET }}
          TF_VAR_db_connection_string: ${{ secrets.DB_CONNECTION_STRING }}
          TF_VAR_database_name: ${{ secrets.DATABASE_NAME }}
          TF_VAR_linode_token: ${{ secrets.LINODE_TOKEN }}
          TF_VAR_mongo_vault_namespace: ${{ secrets.MONGO_DB_KEY_VAULT_NAMESPACE }}
          APP_PORT: 3000
